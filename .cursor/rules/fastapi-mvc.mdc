---
title: FastAPI Backend Project Rules
description: Enforce best practices for FastAPI MVC architecture with TailwindCSS, SQLite ORM, Fly.io deployment, and GitHub version control.
tags: [fastapi, mvc, sqlite, orm, tailwindcss, fly.io, github]
alwaysApply: true
---

# FastAPI MVC Development Guide

## 🧱 Architecture & Project Structure

### MVC Pattern Organization
```
project/
├── app/
│   ├── __init__.py
│   ├── models/          # Database models (SQLAlchemy/SQLModel)
│   │   ├── __init__.py
│   │   └── *.py
│   ├── controllers/     # Business logic layer
│   │   ├── __init__.py
│   │   └── *.py
│   ├── routes/          # API route definitions
│   │   ├── __init__.py
│   │   └── *.py
│   ├── templates/       # Jinja2 templates with TailwindCSS
│   │   ├── base.html
│   │   └── *.html
│   ├── utils/           # Utility functions
│   │   ├── __init__.py
│   │   └── *.py
│   └── database.py      # Database configuration
├── tests/               # Test files
├── migrations/          # Alembic migrations
├── main.py             # FastAPI application entry point
├── requirements.txt    # Dependencies
├── pyproject.toml      # Poetry configuration
├── Dockerfile          # Container configuration
├── fly.toml            # Fly.io deployment config
├── .env                # Environment variables
├── .gitignore          # Git ignore rules
└── README.md           # Project documentation
```

### File Responsibilities
- **Models** (`app/models/`): SQLAlchemy/SQLModel database models
- **Controllers** (`app/controllers/`): Business logic and data access operations
- **Routes** (`app/routes/`): HTTP request/response handling and route definitions
- **Templates** (`app/templates/`): Jinja2 templates with TailwindCSS styling
- **Utils** (`app/utils/`): Shared utility functions and helpers

## ⚙️ FastAPI Best Practices

### Application Setup
```python
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manage application lifespan."""
    # Startup
    await init_db()
    yield
    # Shutdown

app = FastAPI(
    title="API Title",
    description="API Description", 
    version="1.0.0",
    lifespan=lifespan
)

# Mount static files and templates
app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")
```

### Route Organization with OpenAPI Tags
```python
from fastapi import APIRouter

# Organize routes by feature
router = APIRouter(prefix="/api/v1", tags=["todos"])

@router.post("/todos", response_model=TodoResponse, tags=["todos"])
async def create_todo_endpoint(
    todo: TodoCreate,
    db: AsyncSession = Depends(get_db)
) -> TodoResponse:
    """Create a new todo."""
    return await create_todo(db, todo)
```

### Dependency Injection
- Use `Depends()` for database connections, authentication, and services
- Create reusable dependencies for common operations
- Use async dependencies for I/O operations

## 🎨 Frontend Best Practices (TailwindCSS + Vanilla JS)

### Template Structure with Jinja2
```python
from fastapi import Request
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse

templates = Jinja2Templates(directory="app/templates")

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})
```

### Base Template (app/templates/base.html)
```html
<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{{ title or "FastAPI App" }}{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#3B82F6',
                        secondary: '#64748B'
                    }
                }
            }
        }
    </script>
    {% block head %}{% endblock %}
</head>
<body class="h-full bg-gray-50">
    <div class="min-h-full">
        {% block content %}{% endblock %}
    </div>
    {% block scripts %}{% endblock %}
</body>
</html>
```

### HTML Best Practices
- Use semantic HTML5 elements (`<header>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>`)
- Include proper meta tags for SEO and responsive design
- Use `lang` attribute on `<html>` element
- Implement proper heading hierarchy (h1 → h2 → h3)
- Use descriptive alt text for images
- Include ARIA labels for accessibility

### TailwindCSS Guidelines
- Use utility-first approach with consistent spacing scale
- Leverage Tailwind's responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`)
- Use CSS Grid and Flexbox utilities for layouts
- Implement consistent color palette using custom CSS variables
- Use Tailwind's state variants (`hover:`, `focus:`, `active:`, `disabled:`)
- Optimize for mobile-first responsive design

### Mobile-First Design Principles

#### Core Mobile-First Approach
- **Start with mobile**: Design and develop for mobile devices first, then enhance for larger screens
- **Progressive enhancement**: Add features and complexity as screen size increases
- **Touch-friendly interfaces**: Ensure all interactive elements are at least 44px (11 in Tailwind) for touch targets
- **Performance priority**: Optimize for mobile performance with smaller file sizes and faster loading

#### Responsive Breakpoints Strategy
```css
/* Mobile First - Base styles (320px+) */
.mobile-first {
  /* Mobile styles here */
}

/* Small devices (640px+) */
@media (min-width: 640px) {
  .sm:mobile-first {
    /* Tablet styles */
  }
}

/* Medium devices (768px+) */
@media (min-width: 768px) {
  .md:mobile-first {
    /* Small desktop styles */
  }
}

/* Large devices (1024px+) */
@media (min-width: 1024px) {
  .lg:mobile-first {
    /* Desktop styles */
  }
}

/* Extra large devices (1280px+) */
@media (min-width: 1280px) {
  .xl:mobile-first {
    /* Large desktop styles */
  }
}
```

#### Mobile-First TailwindCSS Patterns
```html
<!-- Mobile-first responsive grid -->
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
  <!-- Content adapts from 1 column on mobile to 4 on xl screens -->
</div>

<!-- Mobile-first typography scaling -->
<h1 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold">
  Responsive Heading
</h1>

<!-- Mobile-first spacing -->
<div class="p-4 sm:p-6 md:p-8 lg:p-12">
  <!-- Padding increases with screen size -->
</div>

<!-- Mobile-first navigation -->
<nav class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
  <!-- Stack vertically on mobile, horizontal on larger screens -->
</nav>
```

#### Mobile-Specific Considerations
- **Viewport meta tag**: Always include `<meta name="viewport" content="width=device-width, initial-scale=1.0">`
- **Touch gestures**: Support swipe, pinch, and tap interactions
- **Orientation handling**: Test both portrait and landscape orientations
- **Thumb navigation**: Place important actions within thumb reach (bottom 1/3 of screen)
- **Loading states**: Show loading indicators for mobile users with slower connections
- **Offline support**: Consider service workers for offline functionality

#### Mobile-First Component Examples
```html
<!-- Mobile-first card component -->
<div class="bg-white rounded-lg shadow-sm p-4 sm:p-6 lg:p-8">
  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
    <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2 sm:mb-0">
      {{ title }}
    </h3>
    <button class="w-full sm:w-auto bg-primary text-white px-4 py-2 rounded-md text-sm sm:text-base">
      Action
    </button>
  </div>
  <p class="text-sm sm:text-base text-gray-600 leading-relaxed">
    {{ description }}
  </p>
</div>

<!-- Mobile-first form -->
<form class="space-y-4 sm:space-y-6">
  <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">
        First Name
      </label>
      <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md text-base sm:text-lg">
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">
        Last Name
      </label>
      <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md text-base sm:text-lg">
    </div>
  </div>
  <button class="w-full sm:w-auto bg-primary text-white px-6 py-3 rounded-md font-medium">
    Submit
  </button>
</form>

<!-- Mobile-first navigation -->
<nav class="bg-white shadow-lg">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Mobile menu button -->
      <button class="sm:hidden p-2 rounded-md text-gray-600 hover:text-gray-900">
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
      
      <!-- Desktop navigation -->
      <div class="hidden sm:flex space-x-8">
        <a href="#" class="text-gray-700 hover:text-primary px-3 py-2 text-sm font-medium">
          Home
        </a>
        <a href="#" class="text-gray-700 hover:text-primary px-3 py-2 text-sm font-medium">
          About
        </a>
        <a href="#" class="text-gray-700 hover:text-primary px-3 py-2 text-sm font-medium">
          Contact
        </a>
      </div>
    </div>
  </div>
</nav>
```

#### Performance Optimization for Mobile
- **Image optimization**: Use responsive images with `srcset` and appropriate formats (WebP, AVIF)
- **Lazy loading**: Implement lazy loading for images and non-critical content
- **Critical CSS**: Inline critical CSS for above-the-fold content
- **Minimal JavaScript**: Keep JavaScript bundle size small and load non-critical JS asynchronously
- **CDN usage**: Use CDN for static assets to reduce load times
- **Compression**: Enable gzip/brotli compression for text assets

#### Testing Mobile-First Design
- **Device testing**: Test on actual mobile devices, not just browser dev tools
- **Network conditions**: Test on slow 3G connections
- **Touch testing**: Verify all touch targets are accessible and responsive
- **Orientation testing**: Test both portrait and landscape modes
- **Accessibility testing**: Ensure mobile accessibility with screen readers and voice control

### Component Patterns
```html
<!-- Card Component -->
<div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-200">
    <h3 class="text-lg font-semibold text-gray-900 mb-2">{{ card.title }}</h3>
    <p class="text-gray-600 mb-4">{{ card.description }}</p>
    <button class="bg-primary text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
        {{ card.button_text }}
    </button>
</div>

<!-- Form Component -->
<form class="space-y-4" @submit.prevent="handleSubmit">
    <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
            Email Address
        </label>
        <input 
            type="email" 
            id="email" 
            name="email"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            required
        >
    </div>
</form>
```

### Vanilla JavaScript Best Practices
- Use modern ES6+ features (arrow functions, destructuring, async/await)
- Implement proper error handling with try/catch blocks
- Use event delegation for dynamic content
- Follow functional programming principles
- Implement proper form validation
- Use fetch API for HTTP requests with proper error handling

### JavaScript Patterns
```javascript
// API Client with error handling
class ApiClient {
    constructor(baseURL) {
        this.baseURL = baseURL;
    }

    async request(endpoint, options = {}) {
        try {
            const response = await fetch(`${this.baseURL}${endpoint}`, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('API request failed:', error);
            throw error;
        }
    }

    async getTodos() {
        return this.request('/api/todos');
    }

    async createTodo(todo) {
        return this.request('/api/todos', {
            method: 'POST',
            body: JSON.stringify(todo)
        });
    }
}

// Form handling with validation
function handleFormSubmit(formElement, apiClient) {
    formElement.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(formElement);
        const data = Object.fromEntries(formData);
        
        try {
            await apiClient.createTodo(data);
            showSuccessMessage('Todo created successfully!');
            formElement.reset();
        } catch (error) {
            showErrorMessage('Failed to create todo. Please try again.');
        }
    });
}

// Utility functions
function showSuccessMessage(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg z-50';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}
```

### Frontend Security
- Sanitize user input before displaying
- Use Content Security Policy (CSP) headers
- Implement CSRF protection for forms
- Validate data on both client and server side
- Use HTTPS in production
- Avoid inline JavaScript and CSS

### Performance Optimization
- Minimize HTTP requests by combining CSS/JS files
- Use Tailwind's purge feature to remove unused styles
- Implement lazy loading for images
- Use modern image formats (WebP, AVIF)
- Minimize JavaScript bundle size
- Use browser caching effectively

### Accessibility (a11y)
- Use semantic HTML elements
- Implement proper focus management
- Include ARIA labels and roles
- Ensure sufficient color contrast
- Provide keyboard navigation support
- Use screen reader friendly content

## 🎯 Coding Standards & Best Practices

### Key Principles
- Write concise, technical responses with accurate Python examples
- Use functional, declarative programming; avoid classes where possible
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., `is_active`, `has_permission`)
- Use lowercase with underscores for directories and files (e.g., `routers/user_routes.py`)
- Favor named exports for routes and utility functions
- Use the Receive an Object, Return an Object (RORO) pattern

### Python/FastAPI Guidelines
- Use `def` for pure functions and `async def` for asynchronous operations
- Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation
- File structure: exported router, sub-routes, utilities, static content, types (models, schemas)
- Avoid unnecessary curly braces in conditional statements
- For single-line statements in conditionals, omit curly braces
- Use concise, one-line syntax for simple conditional statements (e.g., `if condition: do_something()`)

### Error Handling and Validation
- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions
  - Use early returns for error conditions to avoid deeply nested if statements
  - Place the happy path last in the function for improved readability
  - Avoid unnecessary else statements; use the if-return pattern instead
  - Use guard clauses to handle preconditions and invalid states early
  - Implement proper error logging and user-friendly error messages
  - Use custom error types or error factories for consistent error handling

### FastAPI-Specific Guidelines
- Use functional components (plain functions) and Pydantic models for input validation and response schemas
- Use declarative route definitions with clear return type annotations
- Use `def` for synchronous operations and `async def` for asynchronous ones
- Minimize `@app.on_event("startup")` and `@app.on_event("shutdown")`; prefer lifespan context managers for managing startup and shutdown events
- Use middleware for logging, error monitoring, and performance optimization
- Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading
- Use HTTPException for expected errors and model them as specific HTTP responses
- Use middleware for handling unexpected errors, logging, and error monitoring
- Use Pydantic's BaseModel for consistent input/output validation and response schemas

### Performance Optimization
- Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests
- Implement caching for static and frequently accessed data using tools like Redis or in-memory stores
- Optimize data serialization and deserialization with Pydantic
- Use lazy loading techniques for large datasets and substantial API responses

### Key Conventions
1. Rely on FastAPI's dependency injection system for managing state and shared resources
2. Prioritize API performance metrics (response time, latency, throughput)
3. Limit blocking operations in routes:
   - Favor asynchronous and non-blocking flows
   - Use dedicated async functions for database and external API operations
   - Structure routes and dependencies clearly to optimize readability and maintainability

## 🗃️ Database (SQLite + ORM)

### SQLAlchemy/SQLModel Setup
```python
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlmodel import SQLModel

# Database configuration
DATABASE_URL = "sqlite+aiosqlite:///./database.db"
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def get_db() -> AsyncGenerator[AsyncSession, None]:
    """Get database session."""
    async with async_session() as session:
        yield session

async def init_db() -> None:
    """Initialize database and create tables."""
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
```

### Database Models
```python
from sqlmodel import SQLModel, Field
from typing import Optional

class Todo(SQLModel, table=True):
    """Database model for todos."""
    id: Optional[int] = Field(default=None, primary_key=True)
    title: str
    completed: bool = Field(default=False)
```

### CRUD Operations with ORM
```python
from sqlalchemy.ext.asyncio import AsyncSession
from sqlmodel import select

async def create_todo(db: AsyncSession, todo: TodoCreate) -> TodoResponse:
    """Create a new todo."""
    db_todo = Todo(title=todo.title, completed=False)
    db.add(db_todo)
    await db.commit()
    await db.refresh(db_todo)
    return TodoResponse.from_orm(db_todo)

async def get_todo(db: AsyncSession, todo_id: int) -> Optional[TodoResponse]:
    """Get a specific todo by ID."""
    result = await db.execute(select(Todo).where(Todo.id == todo_id))
    todo = result.scalar_one_or_none()
    return TodoResponse.from_orm(todo) if todo else None
```

### Migration Management
- Use Alembic for database migrations
- Store migration files in `migrations/` directory
- Always test migrations on staging before production

## Error Handling

### HTTP Status Codes
- **200**: Success (GET, PUT)
- **201**: Created (POST)
- **204**: No Content (DELETE)
- **400**: Bad Request (validation errors)
- **404**: Not Found (resource not found)
- **422**: Unprocessable Entity (Pydantic validation errors)
- **500**: Internal Server Error (unexpected errors)

### Exception Patterns
```python
from fastapi import HTTPException

# Resource not found
if not todo:
    raise HTTPException(status_code=404, detail="Todo not found")

# Operation failed
if not success:
    raise HTTPException(status_code=404, detail="Todo not found")
```

### Database Error Handling
```python
async def create_todo(db: aiosqlite.Connection, todo: TodoCreate) -> TodoResponse:
    try:
        cursor = await db.execute(
            "INSERT INTO todos (title, completed) VALUES (?, ?)",
            (todo.title, False)
        )
        await db.commit()
        todo_id = cursor.lastrowid
        return TodoResponse(id=todo_id, title=todo.title, completed=False)
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail="Database error")
```

## Type Safety and Validation

### Type Hints
- Always use type hints for function parameters and return types
- Use `List[Model]` for collections
- Use `Optional[Model]` for nullable returns
- Use `AsyncGenerator` for database connections

### Pydantic Validation
- FastAPI automatically validates request bodies using Pydantic models
- Returns 422 status code for validation errors
- Provides detailed error messages for invalid fields

## Performance Best Practices

### Async Operations
- Use `async def` for all route handlers
- Use `await` for all database operations
- Avoid blocking operations in route handlers

### Database Best Practices
- Use connection pooling via dependency injection
- Commit transactions explicitly
- Handle database errors gracefully
- Use parameterized queries to prevent SQL injection
- Implement proper indexes on frequently queried columns

### Security
- Always use parameterized queries
- Never concatenate user input into SQL strings
- Validate and sanitize all inputs
- Use proper authentication and authorization
- Don't expose sensitive information in error messages

## Development Guidelines

### Code Organization
- Keep functions focused and single-purpose
- Use descriptive variable names with auxiliary verbs (e.g., `is_active`, `has_permission`)
- Prefer functional programming over classes where possible
- Use early returns for error conditions
- Place the happy path last in functions

### Error Handling Strategy
1. **Early Validation**: Validate input as early as possible
2. **Clear Messages**: Provide clear, actionable error messages
3. **Consistent Format**: Use consistent error response format
4. **Graceful Degradation**: Handle errors gracefully without crashing
5. **Security**: Don't expose sensitive information in error messages

### Testing Considerations
- Each layer can be tested independently
- Use dependency injection for testability
- Mock database connections in unit tests
- Test error conditions and edge cases

## Dependencies

### Required Packages
```
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
aiosqlite==0.19.0  # or asyncpg, aiomysql for production
```

### Optional Packages
```
pytest==7.4.3
pytest-asyncio==0.21.1
httpx==0.25.2  # for testing
```

## 🚀 Advanced Architecture & Scalability

### Microservices Principles
- Design services to be stateless; leverage external storage and caches (e.g., Redis) for state persistence
- Implement API gateways and reverse proxies (e.g., NGINX, Traefik) for handling traffic to microservices
- Use circuit breakers and retries for resilient service communication
- Favor serverless deployment for reduced infrastructure overhead in scalable environments
- Use asynchronous workers (e.g., Celery, RQ) for handling background tasks efficiently

### API Gateway Integration
- Integrate FastAPI services with API Gateway solutions like Kong or AWS API Gateway
- Use API Gateway for rate limiting, request transformation, and security filtering
- Design APIs with clear separation of concerns to align with microservices principles
- Implement inter-service communication using message brokers (e.g., RabbitMQ, Kafka) for event-driven architectures

### Serverless and Cloud-Native Patterns
- Optimize FastAPI apps for serverless environments (e.g., AWS Lambda, Azure Functions) by minimizing cold start times
- Package FastAPI applications using lightweight containers or as a standalone binary for deployment in serverless setups
- Use managed services (e.g., AWS DynamoDB, Azure Cosmos DB) for scaling databases without operational overhead
- Implement automatic scaling with serverless functions to handle variable loads effectively

### Advanced Middleware and Security
- Implement custom middleware for detailed logging, tracing, and monitoring of API requests
- Use OpenTelemetry or similar libraries for distributed tracing in microservices architectures
- Apply security best practices: OAuth2 for secure API access, rate limiting, and DDoS protection
- Use security headers (e.g., CORS, CSP) and implement content validation using tools like OWASP Zap

### Performance and Scalability Optimization
- Leverage FastAPI's async capabilities for handling large volumes of simultaneous connections efficiently
- Optimize backend services for high throughput and low latency; use databases optimized for read-heavy workloads (e.g., Elasticsearch)
- Use caching layers (e.g., Redis, Memcached) to reduce load on primary databases and improve API response times
- Apply load balancing and service mesh technologies (e.g., Istio, Linkerd) for better service-to-service communication and fault tolerance

### Monitoring and Logging
- Use Prometheus and Grafana for monitoring FastAPI applications and setting up alerts
- Implement structured logging for better log analysis and observability
- Integrate with centralized logging systems (e.g., ELK Stack, AWS CloudWatch) for aggregated logging and monitoring

### Advanced Conventions
1. Follow microservices principles for building scalable and maintainable services
2. Optimize FastAPI applications for serverless and cloud-native deployments
3. Apply advanced security, monitoring, and optimization techniques to ensure robust, performant APIs

This guide provides a complete foundation for building scalable, maintainable FastAPI applications following MVC architecture and industry best practices.

## 🎨 Vibecamp Design System

### Brand Identity & Visual Guidelines

#### Core Branding
- **Brand Name**: "vibed coded" (lowercase, informal)
- **Tagline**: "A Vibecamp Creation" (for footer attribution)
- **Logo**: Use `vc-logo.svg` from `/static/img/` directory
- **Color Philosophy**: Pure black and white aesthetic for clean, professional look

#### Color Palette
```css
/* Primary Colors */
--primary: #000000;        /* Pure black */
--secondary: #6B7280;      /* Gray-500 for subtle text */
--accent: #000000;         /* Black for accents */
--danger: #000000;         /* Black for errors */

/* Background Colors */
--bg-primary: #ffffff;     /* Pure white */
--bg-secondary: #ffffff;   /* White backgrounds */
--bg-accent: #f9fafb;      /* Gray-50 for subtle sections */

/* Text Colors */
--text-primary: #000000;   /* Black text */
--text-secondary: #6B7280; /* Gray-500 for secondary text */
--text-muted: #9ca3af;     /* Gray-400 for muted text */
```

#### Typography System
```css
/* Font Families */
--font-hand: 'Kalam', cursive, system-ui;     /* Headings, brand elements */
--font-sans: 'Inter', system-ui, sans-serif;  /* Body text, UI elements */

/* Font Weights */
--font-light: 300;
--font-normal: 400;
--font-medium: 500;
--font-semibold: 600;
--font-bold: 700;

/* Responsive Typography Scale */
--text-xs: 0.75rem;      /* 12px */
--text-sm: 0.875rem;     /* 14px */
--text-base: 1rem;       /* 16px */
--text-lg: 1.125rem;     /* 18px */
--text-xl: 1.25rem;      /* 20px */
--text-2xl: 1.5rem;      /* 24px */
--text-3xl: 1.875rem;    /* 30px */
--text-4xl: 2.25rem;     /* 36px */
--text-5xl: 3rem;        /* 48px */
```

#### TailwindCSS Configuration
```javascript
tailwind.config = {
  theme: {
    extend: {
      colors: {
        primary: '#000000',
        secondary: '#6B7280',
        accent: '#000000',
        danger: '#000000'
      },
      fontFamily: {
        'sans': ['Inter', 'system-ui', 'sans-serif'],
        'hand': ['Kalam', 'cursive', 'system-ui']
      }
    }
  }
}
```

#### Logo Integration
```html
<!-- Navigation Logo -->
<h1 class="text-2xl font-hand font-bold text-black flex items-center">
    <img src="/static/img/vc-logo.svg" alt="Logo" class="w-8 h-8 mr-2">
    [App Name]
</h1>

<!-- Favicon -->
<link rel="icon" type="image/svg+xml" href="/static/img/vc-logo.svg">
```

#### Component Design Patterns

##### Navigation Bar
```html
<nav class="bg-white border-b-2 border-black">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex items-center">
                <h1 class="text-2xl font-hand font-bold text-black flex items-center">
                    <img src="/static/img/vc-logo.svg" alt="Logo" class="w-8 h-8 mr-2">
                    [App Name]
                </h1>
            </div>
            <div class="flex items-center space-x-4">
                <a href="/" class="text-black hover:text-gray-600 px-3 py-2 rounded-md text-sm font-medium font-hand">
                    Navigation Item
                </a>
            </div>
        </div>
    </div>
</nav>
```

##### Hero Section
```html
<div class="bg-white py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <h1 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-hand font-bold text-black mb-4">
                [Hero Title]
            </h1>
            <p class="text-base sm:text-lg md:text-xl text-gray-600 mb-6 sm:mb-8 font-sans">
                [Hero Description]
            </p>
        </div>
    </div>
</div>
```

##### Form Elements
```html
<!-- Form Container -->
<div class="bg-white border-2 border-black rounded-lg shadow-lg p-4 sm:p-6 mb-6 sm:mb-8">
    <h2 class="text-xl sm:text-2xl font-hand font-bold text-black mb-4 sm:mb-6">
        <i class="fas fa-icon mr-2 text-black"></i>
        Form Title
    </h2>
    
    <!-- Input Fields -->
    <div>
        <label for="field" class="block text-sm font-medium text-black mb-2 font-hand">
            Field Label
        </label>
        <input 
            type="text" 
            id="field" 
            name="field"
            class="w-full px-4 py-3 pl-10 border-2 border-black rounded-lg focus:ring-2 focus:ring-black focus:border-transparent text-base sm:text-lg font-sans"
            placeholder="Placeholder text..."
        >
    </div>
    
    <!-- Select Dropdowns -->
    <div>
        <label for="select" class="block text-sm font-medium text-black mb-2 font-hand">
            Select Label
        </label>
        <select 
            id="select" 
            name="select"
            class="w-full px-3 py-2 border-2 border-black rounded-md focus:ring-2 focus:ring-black focus:border-transparent font-sans"
        >
            <option value="">Select option...</option>
        </select>
    </div>
    
    <!-- Checkboxes -->
    <label class="flex items-center">
        <input 
            type="checkbox" 
            id="checkbox" 
            name="checkbox"
            class="rounded border-2 border-black text-black focus:ring-black"
        >
        <span class="ml-2 text-sm text-black font-hand">Checkbox label</span>
    </label>
    
    <!-- Buttons -->
    <button 
        type="submit"
        class="w-full sm:w-auto bg-black text-white px-6 sm:px-8 py-3 rounded-lg hover:bg-gray-800 focus:ring-2 focus:ring-black focus:ring-offset-2 transition-colors duration-200 font-hand font-bold text-base sm:text-lg"
    >
        <i class="fas fa-icon mr-2"></i>
        Button Text
    </button>
</div>
```

##### Cards & Content
```html
<!-- Content Cards -->
<div class="bg-white border-2 border-black rounded-lg shadow-md p-4 sm:p-6 hover:shadow-lg transition-shadow duration-200">
    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-4 space-y-2 sm:space-y-0">
        <h3 class="text-lg sm:text-xl font-hand font-bold text-black">Card Title</h3>
        <span class="px-3 py-1 bg-black text-white text-xs sm:text-sm rounded-full self-start sm:self-auto font-sans">
            Badge
        </span>
    </div>
    
    <div class="space-y-3">
        <div class="flex items-center text-black">
            <i class="fas fa-icon mr-2 text-black"></i>
            <span class="font-sans">Content text</span>
        </div>
    </div>
    
    <!-- Tags -->
    <div class="mt-4">
        <h4 class="text-sm font-medium text-black mb-2 font-hand">Tags:</h4>
        <div class="flex flex-wrap gap-2">
            <span class="px-2 py-1 bg-black text-white text-xs rounded-full font-sans">
                Tag
            </span>
        </div>
    </div>
</div>
```

##### Pagination
```html
<nav class="flex flex-wrap items-center justify-center gap-2 sm:gap-1">
    <!-- Previous Button -->
    <button 
        class="px-3 py-2 text-sm font-medium text-black bg-white border-2 border-black rounded-md hover:bg-black hover:text-white min-w-[80px] font-hand">
        Previous
    </button>
    
    <!-- Page Numbers -->
    <button 
        class="px-3 py-2 text-sm font-medium text-white bg-black rounded-md min-w-[40px] font-hand">
        1
    </button>
    <button 
        class="px-3 py-2 text-sm font-medium text-black bg-white border-2 border-black hover:bg-black hover:text-white rounded-md min-w-[40px] font-hand">
        2
    </button>
    
    <!-- Next Button -->
    <button 
        class="px-3 py-2 text-sm font-medium text-black bg-white border-2 border-black rounded-md hover:bg-black hover:text-white min-w-[80px] font-hand">
        Next
    </button>
</nav>
```

##### Footer
```html
<footer class="bg-white border-t-2 border-black py-8 mt-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center space-y-4">
            <div class="text-sm text-gray-600 font-sans">
                <p>Data sourced from <a href="[data-source-url]" target="_blank" class="text-black hover:underline font-medium">[Data Source]</a></p>
                <p>Licensed under <a href="[license-url]" target="_blank" class="text-black hover:underline font-medium">[License]</a></p>
            </div>
            <div class="text-sm text-black font-hand">
                <p>A <a href="https://vibecamp.au/" target="_blank" class="text-black hover:underline font-bold">Vibecamp</a> Creation</p>
            </div>
        </div>
    </div>
</footer>
```

#### State & Loading Elements
```html
<!-- Loading State -->
<div class="text-center py-12">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-black"></div>
    <p class="mt-2 text-black font-hand">Loading...</p>
</div>

<!-- Empty State -->
<div class="text-center py-12">
    <i class="fas fa-icon text-4xl text-black mb-4"></i>
    <h3 class="text-lg font-medium text-black mb-2 font-hand">No results found</h3>
    <p class="text-black font-sans">Try adjusting your criteria</p>
</div>
```

#### Mobile-First Responsive Patterns
```html
<!-- Responsive Typography -->
<h1 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-hand font-bold text-black">
    Responsive Heading
</h1>

<!-- Responsive Spacing -->
<div class="p-4 sm:p-6 md:p-8 lg:p-12">
    <!-- Content with responsive padding -->
</div>

<!-- Responsive Layouts -->
<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-2 sm:space-y-0">
    <!-- Stack vertically on mobile, horizontal on larger screens -->
</div>

<!-- Responsive Grid -->
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
    <!-- Responsive grid layout -->
</div>
```

#### Required Font Imports
```html
<link href="https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
```

#### Design Principles
1. **Consistency**: Use the same color palette, typography, and spacing across all Vibecamp POC apps
2. **Simplicity**: Clean black and white design with minimal distractions
3. **Accessibility**: High contrast ratios and readable fonts
4. **Mobile-First**: Design for mobile devices first, then enhance for larger screens
5. **Brand Recognition**: Always include the Vibecamp logo and "A Vibecamp Creation" attribution
6. **Informal Tone**: Use handwritten-style fonts for headings to maintain approachable feel

#### Implementation Checklist
- [ ] Add logo to `/static/img/vc-logo.svg`
- [ ] Configure TailwindCSS with brand colors and fonts
- [ ] Import required Google Fonts (Kalam, Inter)
- [ ] Apply consistent navigation structure
- [ ] Use black borders (border-2 border-black) for all containers
- [ ] Apply font-hand for headings and brand elements
- [ ] Apply font-sans for body text and UI elements
- [ ] Include proper footer attribution
- [ ] Test mobile responsiveness
- [ ] Ensure high contrast accessibility

This design system ensures all Vibecamp POC applications maintain consistent branding, user experience, and visual identity while being easily implementable across different project types.